@use "sass:color";
@use "sass:map";
@use "sass:string";

$breakpoint-map: () !default;
$color-map: () !default;
$opacity-range: () !default;

@function escape($any) {
	$str: "" + $any;
	$escaped: "";
	@for $x from 1 through string.length($str) {
		$ch: string.slice($str, $x, $x);
		@if $ch == "." {
			$escaped: $escaped + "\\"+ $ch;
		} @else {
			$escaped: $escaped + $ch;
		}
	}
	@return $escaped;
}

$separator: "\\:";

@function get-ampersand() {
	@if not & {
		@return ".";
	}
	@return & + $separator;
}

@mixin generate-colors-from-map($shorthand, $prop, $map, $opacity-range) {
	$amp: get-ampersand();

	@each $k, $v in $map {
		#{$amp}#{$shorthand}-#{escape($k)} {
			@if $k == transparent or $k == currentColor {
				color: #{$v};
			} @else {
				--#{$shorthand}-opacity: 1;
				#{$prop}: $v;
				#{$prop}: string.unquote(
					"rgba(#{color.red($v)}, #{color.green($v)}, #{color.blue($v)}, #{var(--#{$shorthand}-opacity)})"
				);
			}
		}
	}
	@each $v in $opacity-range {
		#{$amp}#{$shorthand}-opacity-#{escape($v * 100)} {
			--#{$shorthand}-opacity: #{$v};
		}
	}
}

@mixin color-from-map($map, $opacity-range) {
	@include generate-colors-from-map("text", color, $map, $opacity-range);
}
@mixin background-color-from-map($map, $opacity-range) {
	@include generate-colors-from-map("bg", color, $map, $opacity-range);
}
@mixin border-color-from-map($map, $opacity-range) {
	@include generate-colors-from-map("border", color, $map, $opacity-range);
}

@at-root {
	@include color-from-map($map: $color-map, $opacity-range: $opacity-range);
	@include background-color-from-map($map: $color-map, $opacity-range: $opacity-range);
	@include border-color-from-map($map: $color-map, $opacity-range: $opacity-range);
	@each $k, $v in $breakpoint-map {
		@media (min-width: #{$v + px}) {
			.#{$k} {
				@at-root {
					@include color-from-map($map: $color-map, $opacity-range: $opacity-range);
					@include background-color-from-map($map: $color-map, $opacity-range: $opacity-range);
					@include border-color-from-map($map: $color-map, $opacity-range: $opacity-range);
				}
			}
		}
	}
}
